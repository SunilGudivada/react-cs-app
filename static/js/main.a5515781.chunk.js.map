{"version":3,"sources":["components/Options/Options.js","components/Standardization/Standardization.js","components/Header/Header.js","components/Rules/Rules.js","App.js","serviceWorker.js","index.js"],"names":["Options","Form","Group","as","Col","controlId","Control","defaultValue","Standardization","state","attrArray","Fragment","Container","Card","style","width","marginTop","Body","Title","Table","className","this","map","value","index","key","React","Component","Header","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","alt","src","height","Toggle","aria-controls","Collapse","id","Nav","Link","Rules","appendRule","allRules","rules","push","CustomerId","matchingMethod","FullName","cutOff","setState","changeMatchingMethod","event","attr","updatedRule","target","Row","Label","type","placeholder","rows","Button","margin","onClick","marginBottom","backgroundColor","borderRadius","padding","onChange","e","length","App","exact","path","component","DDRules","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a5515781.chunk.js","sourcesContent":["import React from 'react';\nimport Form from 'react-bootstrap/Form'\nimport Col from 'react-bootstrap/Col'\n\n\nfunction Options(){\n   return(\n    <Form.Group as={Col} controlId=\"formOptions\" >\n    <Form.Control as=\"select\" defaultValue=\"..\">\n      <option>Choose Matching Attribute</option>\n      <option>Customer Id</option>\n      <option>First Name</option>\n      <option>Middle Name</option>\n      <option>Last Name</option>\n      <option>Full Name</option>\n      <option>Alias Name</option>\n      <option>DOB</option>\n      <option>Nationality</option>\n      <option>Personal Email</option>\n      <option>Business Email</option>\n      <option>Personal Phone</option>\n      <option>Business Mobile Phone</option>\n      <option>Home Phone</option>\n      <option>Home Address</option>\n      <option>Work Address</option>\n    </Form.Control>\n    </Form.Group>\n   )\n}\n\nexport default Options","import React from 'react';\nimport './Standardization.css';\nimport { Table, Container, Card} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Options from './../Options/Options'\n\nclass Standardization extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            attrArray: [\n                'First Name',\n                'Middle Name',\n                'Last Name',\n                'Alias Name',\n                'Full Name',\n                'DOB',\n                'Nationality',\n                'Personal Email',\n                'Business Email',\n                'Personal Phone',\n                'Mobile Phone',\n                'Work Address',\n                'Home Address'\n            ]\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Container>\n                <Card style={{ width: '100%',marginTop:'20px' }}>\n                    <Card.Body>\n                        <Card.Title>Standardization of Attributes from Multiple Sources</Card.Title>\n                    <Table className=\"table-hover table-striped\" style={{marginTop:'20px'}} >\n                        <thead className=\"thead-dark\">\n                            <tr>\n                                <th>Standardized Attributes</th>\n                                <th>Source1 Attributes</th>\n                                <th>Source2 Attributes</th>\n                            </tr>\n                        </thead>\n            \n                        <tbody>\n                            {this.state.attrArray.map((value, index) => {\n                                return (\n                                    <tr key={index}>\n                                        <td>{value}</td>\n                                        <td><Options></Options></td>\n                                        <td><Options></Options></td>\n                                    </tr>\n                                )\n                            })}\n\n                        </tbody>\n                    </Table>\n                    </Card.Body>\n                    </Card>\n                </Container>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default Standardization;","import React from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\n\nclass Header extends React.Component {\n\n    render() {\n        return (\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n                <Navbar.Brand href=\"#home\">\n                    <img\n                        alt=\"\"\n                        src=\"/logo.svg\"\n                        width=\"30\"\n                        height=\"30\"\n                        className=\"d-inline-block align-top\"\n                    />{''}\n                Company Name\n                </Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link href=\"/react-cs-app/#Standarization\">Standarization</Nav.Link>\n                        <Nav.Link href=\"/react-cs-app/#Rules\">Rule</Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        )\n    }\n}\n\n\nexport default Header;","import React from 'react';\nimport { Container,Card,Button,Row,Col,Form } from 'react-bootstrap';\nimport './Rules.css'\n\nclass Rules extends React.Component{\n    constructor() {\n        super();\n        this.state = { rules:[\n                        {\n                            CustomerId: {\n                                matchingMethod:''\n                            },\n                            FullName: {\n                                matchingMethod:'',\n                                value: '',\n                                cutOff: ''\n                            }\n                        }\n                    ] \n                }\n        }\n\n    appendRule = ()=> {\n        let newRule = {\n                        CustomerId: {\n                            matchingMethod:''\n                        },\n                        FullName: {\n                            matchingMethod:'',\n                            value: '',\n                            cutOff: ''\n                        }\n                    }\n        let allRules = this.state.rules.push(newRule);\n        this.setState({allRules});\n    }\n\n    changeMatchingMethod = (event,index, attr) =>{\n        let updatedRule = this.state.rules[index];\n        if(attr === \"customerID\"){\n            updatedRule.CustomerId.matchingMethod = event.target.value;\n            this.state.rules[index] = updatedRule;\n            this.setState(this.state.rules[index]);\n        }else{\n            updatedRule.FullName.matchingMethod = event.target.value;\n            this.state.rules[index] = updatedRule;\n            this.setState(this.state.rules);\n        }\n    }\n\n    render(){\n        return(\n            <Container>\n                <Card style={{ width: '100%',marginTop:'12px' }}>\n                    <Card.Body>\n                        <Card.Title>Deduplication Rules</Card.Title>\n                        <Row>\n                            <Col>\n                                <Form>\n                                    <Form.Group controlId=\"formRuleSetName\">\n                                        <Form.Label>Rule Set Name</Form.Label>\n                                        <Form.Control type=\"text\" placeholder=\"Enter RuleSet Name\" />\n                                    </Form.Group>\n                                </Form>\n                            </Col>\n                            <Col></Col>\n                            <Col>\n                                <Form.Group controlId=\"formRuleSetDescription\">\n                                    <Form.Label>Description</Form.Label>\n                                    <Form.Control as=\"textarea\" rows=\"2\" placeholder=\"Enter RuleSet Description \"/>\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                        \n                        <Row style={{marginTop: '10px'}}>\n                            <Col>\n                            <Form.Group controlId=\"formAggregationMethod\" >\n                                <Form.Label>Selection Aggregation Method</Form.Label>\n                                <Form.Control as=\"select\" defaultValue=\"..\">\n                                    <option>Choose Aggregation Method</option>\n                                    <option>Minimum</option>\n                                    <option>maxiumum</option>\n                                    <option>Average</option>\n                                </Form.Control>\n                            </Form.Group>  \n                            </Col>\n\n                            <Col />\n                            <Col>RuleSet Score Threshold <Form.Control type=\"text\" placeholder=\"RuleSet Threshold Score\" /></Col> \n                        </Row>  \n                                                                      \n                    </Card.Body>\n                </Card>\n                <Button variant=\"primary\" style={{margin: '10px'}} onClick={this.appendRule}>Add Rule</Button>  \n                {this.state.rules.map((value, index) => {\n                    return (\n                        <>\n                            <Card key={index} style={{ marginBottom: '10px' }}>\n                                <Card.Body id=\"ruleSet\">\n                                    <Row>\n                                        <Col>\n                                            <Form.Label>Rule Name</Form.Label>\n                                            <Form.Control type=\"Text\" placeholder=\"Enter Rule Name\"></Form.Control>\n                                        </Col>\n                                        <Col />\n                                        <Col>\n                                            <Form.Label>Rule Weightage</Form.Label>\n                                            <Form.Control type=\"Text\" placeholder=\"Enter Rule Weightage\"></Form.Control>\n                                        </Col>\n                                    </Row>\n                                    <Row style={{ marginTop: '10px', backgroundColor: '#d4d3d3', borderRadius: '4px', padding: '10px' }}>\n                                        <Col >Customer ID</Col>\n                                        <br></br>\n                                        <Col>\n                                            <Form.Label>Matching Method</Form.Label>\n                                            <Form.Control as=\"select\" defaultValue=\"..\" onChange={(e)=>this.changeMatchingMethod(e,index , 'customerID')}>\n                                                <option>Choose Matching Method</option>\n                                                <option value=\"ExactMatch\">Exact Match</option>\n                                                <option value=\"Fuzzy\">Fuzzy</option>\n                                            </Form.Control>\n                                        </Col>\n                                        {(this.state.rules[index].CustomerId.matchingMethod === 'Fuzzy')?(\n                                            <>\n                                            <Col>\n                                                <Form.Label>Fuzzy Value</Form.Label>\n                                                <Form.Control type=\"text\" placeholder=\"Enter Fuzzy Value\"></Form.Control>\n                                            </Col>\n                                            <Col>\n                                                <Form.Label>Fuzzy Cut Off</Form.Label>\n                                                <Form.Control type=\"text\" placeholder=\"Enter Fuzzy Cut off\"></Form.Control>\n                                            </Col>\n                                            </>\n                                        ):(<><Col /><Col /></>)}\n                                        \n                                    </Row>\n                                    <Row style={{ marginTop: '10px', backgroundColor: '#d4d3d3', borderRadius: '4px', padding: '10px' }}>\n                                        <Col >Full Name</Col>\n                                        <br></br>\n                                        <Col>\n                                            <Form.Label>Matching Method</Form.Label>\n                                            <Form.Control as=\"select\" defaultValue=\"..\" onChange={(e)=>this.changeMatchingMethod(e,index , 'FullName')}>\n                                                <option>Choose Matching Method</option>\n                                                <option value=\"ExactMatch\">Exact Match</option>\n                                                <option value=\"Fuzzy\">Fuzzy</option>\n                                            </Form.Control>\n                                        </Col>\n                                        {(this.state.rules[index].FullName.matchingMethod === 'Fuzzy')?(\n                                            <>\n                                            <Col>\n                                                <Form.Label>Fuzzy Value</Form.Label>\n                                                <Form.Control type=\"text\" placeholder=\"Enter Fuzzy Value\"></Form.Control>\n                                            </Col>\n                                            <Col>\n                                                <Form.Label>Fuzzy Cut Off</Form.Label>\n                                                <Form.Control type=\"text\" placeholder=\"Enter Fuzzy Cut off\"></Form.Control>\n                                            </Col>\n                                            </>\n                                        ):(<><Col /><Col /></>)}\n                                    </Row>\n                                </Card.Body>\n                            </Card>\n                        </>\n                    )\n                })\n                }\n                {(this.state.rules.length >= 3) ? (\n                    <Button variant=\"primary\" style={{ margin: '10px' }} onClick={this.appendRule}>Add Rule</Button>\n                ) : (<div></div>)\n                }\n            </Container>\n        )\n    }\n\n    \n}\n\nexport default Rules;","import React from 'react';\nimport './App.css';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport Standardization from './components/Standardization/Standardization';\nimport Header from './components/Header/Header';\nimport DDRules from './components/Rules/Rules'\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <HashRouter>\n        <Header/>\n        <Switch>\n        <Route exact path='/Standarization' component={Standardization} />\n        <Route exact path='/Rules' component={DDRules} />\n        </Switch>\n      </HashRouter>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}